= Exercices Programmation Java
:author: Arnaud Tournier
:email: ltearno@gmail.com
:toc: macro
:toc-title: Exercices de programmation orientée objet avec Java
:source-highlighter: highlightjs

LTE Consulting (C) - 2016

toc::[]

Ces exercices sont Open Source et sont disponibles en ligne : https://github.com/ltearno/formation-programmation-java[github.com/ltearno/formation-programmation-java]

== Créer une bibliothèque pour nos jeux

Une classe `Plateau`

Une classe abstraite ou interface `Piece`

== Jeu bidon sur Plateau

=== Première étape

Créer une classe JeuBidon :

- un attribut *privé* `plateau` de type `Plateau`
- une méthode *public* `jouer()`

Dans la méthode main, écrire

[source,language="java"]
----
JeuBidon jeu = new JeuBidon();
jeu.jouer();
----

=== Deuxième étape

Implémenter l'algorithme basique :

----
Poser la question : "Voulez-vous ajouter une pièce ?"
Si réponse est NON, fin de la méthode `jouer` (donc on fait return)
Si la réponse est OUI :
	Poser la question : "Quelle est l'abscisse ?"
	Poser la question : "Quelle est l'ordonnée ?"
	Placer une nouvelle pièce sur le plateau à l'endroit choisi par l'utilisateur.
	Afficher le tableau
	Recommencer
----

=== Etapes suivantes

Implémenter une méthode `Coordonnee saisieCoordonnee( String message )` qui renvoie directement un objet de type `Coordonnee`.

Permettre à l'utilisateur de saisir "5;3".

Permettre à l'utilisateur de saisir la couleur de la pièce à ajouter.

== Jeu de Puissance 4

=== Etape 1 : création des classes

Créer une énumération `CouleurPuissance4` possédant deux valeurs : `Rouge` et `Jaune`. Cet enum représentera la couleur des jetons

Créer une classe `Jeton` avec :

- un attribut *privé* `nom` de type `String`
- un attribut *privé* `couleur` de type `CouleurPuissance4`
- le constructeur et les deux _getters_ des attributs `nom` et `couleur`.

Créer une classe `Puissance4` avec :

- un attribut *privé* `plateau` de type `Plateau`,
- une méthode *public* `jouer()`,
- une méthode *privée* `getPremiereLigneVide( int colonne )` qui retourne -1 si aucune cellule n'est vide dans la colonne passée en paramètre, et qui retourne l'index de la ligne à laquelle il _faudrait_ insérer le jeton.

=== Etape 2 : implémentation de l'algorithme

Dans la méthode `jouer()` de la classe `Puissance4`, implémenter l'algorithme suivant :

----
Saisir le nom du joueur 1
Saisir la couleur du joueur 1
Saisir le nom du joueur 2
Créer les deux instances de `Joueur` correspondants aux deux joueurs
TANT QUE (personne n'a gagné) ET QUE (le plateau n'est pas complètement rempli -> penser à implémenter une méthode Plateau.estPlein())
	Alterner le joueur
	Déclarer une variable `int ligneInsertion`
	Déclarer une variable `int colonneInsertion`
	FAIRE (correspond à une boucle do...while)
		Saisir la colonne d'insertion, stocker le résultat dans une variable `colonneInsertion`
		ligneInsertion = getPremiereLigneVide( colonneInsertion )
		SI ligneInsertion < 0
			AFFICHER MESSAGE : "La colonne est pleine, choisis-en une autre !"
		FIN SI
	TANT QUE( ligneInsertion < 0 )
	Placer la pièce à la coordonnée [colonneInsertion;ligneInsertion]
	Afficher le terrain
FIN TANT QUE
AFFICHER Math nul ou le gagnant
----

== Exercices avec les collections

=== Exercice 1 : `List<T>`

- Instancier une `List<String>` avec la classe `ArrayList<T>`.
- Y stocker une dizaine de chaines de caractère.
- Parcourir la liste et afficher chaque chaine.
- Faire saisir à l'utilisateur un index, afficher la chaine stockée à l'index saisi.

=== Exercice 2 : `Set<T>`

- Instancier un `Set<T>` avec la classe `HashSet<T>`.
- Y stocker les chaines "bateau", "Bateau", "soleil", "bateau" et "fleur".
- Parcourir l'ensemble et afficher chaque chaine.
- Faire saisir à l'utilisateur un mot et indiquer si ce mot est présent dans l'ensemble. S'il n'est pas présent, le rajouter et recommencer.

=== Exercice 3 : `Map<K, V>`