= Cours de programmation orientée objet avec Java
:author: Arnaud Tournier
:email: ltearno@gmail.com
:toc: macro
:toc-title: Cours de programmation orientée objet avec Java
:imagesdir: java-images
:source-highlighter: highlightjs

LTE Consulting (C) - 2016

toc::[]

Ce cours est Open Source et est disponible en ligne : https://github.com/ltearno/formation-programmation-java[github.com/ltearno/formation-programmation-java]

== Enjeux et Etat de l'art

== UML - conception objet

=== Modélisation objet

=== Diagramme de cas d'utilisation

=== Diagramme de classe

=== Diagramme de séquence

== Java - Les fondamentaux

=== Présentation de Java et JVM

=== Principes

=== Programme `HelloWorld`

Créez un projet vide et un fichier `HelloWorld.java` dedans avec le contenu suivant :

[source,language="java"]
----
public class HelloWorld
{
	public static void main( String[] args ) <1>
	{
		System.out.println( "Bonjour tout le monde !" ); <2>
	}
}
----
<1> Méthode principale du programme.
<2> Appel qui permet d'afficher "Bonjour tout le monde !" à l'écran.

Compiler ce code avec la commande

`javac HelloWorld.java`

Ceci produit un fichier `HelloWorld.class` contenant le byte-code issue de la compilation du code source.

Exécutez ce programme avec la commande :

`java HelloWorld`

Le programme écrit "Bonjour tout le monde !" sur la console.

=== Variables

Variable:: un emplacement en mémoire avec un _nom_ et un _type_.

==== Déclaration

Ceci déclare une variable nommée `i` de type `int`.

[source,language="java"]
----
int i;
----

==== Affectation

Ici nous affectons la valeur `42` à la variable `i`.

[source,language="java"]
----
int i; <1>
i = 42; <2>
----
<1> Déclaration
<2> Affectation

==== Utilisation

Pour utiliser la valeur contenue dans la variable, il suffit de mentionner son nom :

[source,language="java"]
----
int v = i; <1>

System.out.println( "La valeur de v est : " + v ); <2>
----
<1> Lecture de `i` pour affecter la variable ``v`
<2> Lecture de `v` pour construire la chaine qui va s'afficher dans la console.

=== Les types primitifs

Il existe en Java deux familles de type : les types primitifs et les types objet.

Les types primitifs portent des valeurs, en voici la liste : 

- valeur booléenne : `boolean`,
- valeurs entières : `byte`, `short`, `int`, `long`,
- valeurs flottantes : `float` et `short`,
- valeur caractère (unicode, 16 bits) : `char`.

=== Les tableaux

Une ou plusieurs dimension.

Indices démarrent de zéro.

Un tableau stocke la classe des éléments qu'il stocke. Il provoque une exception `java.lang.ArrayStoreException` si un objet du mauvais type est inséré dans le tableau.

`IndexOutOfBoundsExeption`

=== La classe `String`

Voir surtout la https://docs.oracle.com/javase/7/docs/api/java/lang/String.html[Javadoc] de la class String...

La classe `String` sert à représenter des chaînes de caractères (qui ont le plus souvent comme objectif d'être affichées à un moment où un autre à l'utilisateur).

Voici quelques méthodes de la classe `String` que vous pourrez trouver utiles :

==== `boolean startsWith( String other )`, `boolean endsWith( String other )`

Permet de savoir si une chaîne commence par une autre (ou termine pour la méthode `endsWith()`).

==== `String[] split( String splitter )`

Permet de découper une chaîne de caractère en morceaux séparés par la chaine `splitter`.

Exemple :

[source,language="java"]
----
String s = "5;6";

// partage la chaine "5;6" en utilisant ';' comme séparateur
String[] parts = s.split( ";" );

// affiche "2"
System.out.println( parts.length );

// affiche "5"
System.out.println( parts[0] );

// affiche "6"
System.out.println( parts[1] );
----

==== `String trim()`

Renvoie la chaine sans les espaces de début et de fin.

Par exemple appeller cette méthode sur la chaine "  Bonjour Madame  " retournera la chaine "Bonjour Madame".

==== `String toLowerCase()`

Retourne une chaine dans laquelle les majuscules ont été transformées en minuscules.

==== `String toUpperCase()`

Retourne une chaine dans laquelle les minuscules ont été transformées en majuscules.

==== `boolean isEmpty()`

Retourne `true` si la chaine de caractères est vide, `false` sinon.

==== `int length()`

Retourne la longueur de la chaîne de caractères.

==== `boolean equals( Object other )`, `boolean equalsIgnoreCase( String other )`

Retourne `true` si la chaine passée en paramètre est identique à celle sur laquelle on appelle la méthode. La méthode `equalsIgnoreCase` ignore la casse lors de la comparaison.

==== `int indexOf( String part )`

Cherche dans la chaine si elle contient `part`, auquel cas cette méthode retourne l'index où de trouve `part` dans la chaîne sur laquelle on appelle cette méthode. Elle retourne *-1* si `part` n'est pas trouvée.

==== `substring( int start, int end )`

Retourne une sous chaine de la chaine sur laquelle est appellée la méthode, en commençant à l'index `start` et en terminant à l'index `end` _exclu_.

==== `replace( String motif, String par )`, `replaceAll( String motif, String par )`

Retourne une chaine dans laquelle l'occurence de `motif` a été remplacée par `par`. La méthode `replaceAll` remplace *toutes* les occurences.

NOTE: Attention, le paramètre `motif` est en fait interprété comme une expression régulière.

=== Structures de controle

=== Ecrire une classe

==== Un fichier, une classe

Une classe java est écrite dans un fichier nommé par le même nom (et même casse) auquel on donne l'extension `.java`.

Ce fichier .java sera situé dans un sous-répertoire du répertoire `src/` du projet, et qui correspondra au chemin jusqu'au _package_ de la classe.

NOTE: Il est néanmoins possible de déclarer plusieurs classes dans un même fichier *.java*. Nous reviendrons sur ces cas plus tard dans le cours.

==== Déclaration d'une classe

Pour créer une classe, on utilise le code suivant :

[source,language="java"]
----
[public] class NomDeLaClasse
{
	// Corps de la classe (attributs et méthodes)
}
----

NOTE: Par convention les noms de classes commencent par une majuscule comme par exemple `NomDeLaClasse`.

==== Fully Qualified Name

Le véritable nom complet d'une classe s'appelle le _Fully Qualified Name_. Il est composé du _nom de package_ dans lequel se trouve la classe ainsi que du _nom de la classe_ lui-même.

Ainsi pour une classe déclarée ainsi :

[source,language="java"]
----
package fr.lteconsulting;

class MaClasse
{
	// ...
}
----

Le _FQN_ de cette classe est `fr.lteconsulting.MaClasse`.

NOTE: Par convention les noms de package sont tout en minuscule, comme par exemple : `fr.lteconsulting`.

==== Importation avec `import`

Lorsque l'on souhaite utiliser une classe qui n'est pas située dans le même package que celle qui l'utilise, on peut l'importer, de façon à ne pas avoir à rappeler le _FQN_ complet à chaque utilisation.

Ainsi, à la place de ceci :

[source,language="java"]
----
package fr.lteconsulting;

class MaClasse
{
	MaClasse()
	{
		fr.lteconsulting.outils.MonOutil outil;
		outil = new fr.lteconsulting.outils.MonOutil();
	}
}
----

On pourra écrire ceci :

[source,language="java"]
----
package fr.lteconsulting;

import fr.lteconsulting.outils.MonOutil;

class MaClasse
{
	MaClasse()
	{
		MonOutil outil;
		outil = new MonOutil();
	}
}
----

- écrire attribut
- écrire méthode
- constructeur
-- délégation
-- this et super

=== Classes abstraites

=== Classes finales

=== Champs et méthodes statiques

Attribut statique:: un attribut partagé par toutes les instances d'une classe.

Attribut d'instance:: chaque objet a SA propre valeur pour cet attribut

=== Héritage

==== Conversion de type (`instanceof` et transtypage)

Le système de typage de Java n'est pas unifié.

=== La classe `Object`

==== `boolean equals( Object other )` et `int hashCode()`

Ces deux méthodes fonctionnent main dans la main et répondent à ces questions :

- `equals` doit retourner `true` si l'objet passé en paramètre peut être considéré comme identique (au sens de l'application) à l'objet sur lequel cette méthode est appelée.
- `hashCode` doit retourner le même résultat pour deux objets considérés identiques (donc retournant `true` si appelés sur `equals`).

IMPORTANT: Il est important que ces deux méthodes soient implémentées de façon à garder leur résultat cohérents. De nombreuses structures de données dépendent de cette cohérence...

==== `String toString()`

Renvoie une représentation textuelle de l'objet sur lequel on appelle cette méthode.

Il est en général utile de réimplémenter cette méthode de façon à obtenir un résultat _humain_ lorsque l'on combine une chaine de caractère avec un objet.

L'implémentation de cette méthode dans la classe `Object` consiste à indiquer un code correspondant au type de l'objet suivi de l'adresse mémoire à laquelle cet objet est stocké.

==== `Class<?> getClass()`

Renvoie un objet représentant la classe de l'objet sur lequel on appelle cette méthode.

=== Annotations introduction : @Deprecated, @Override

=== Interfaces

- séparer le contrat de l'implémentation
- écrire une interface
- implémenter une interface

==== Définir une interface

Nous définissons ici l'interface `IMonInterface` :

[source,language="java"]
----
public interface IMonInterface {
	// le mot clé public est facultatif car implicite
	[public] void afficher();
	
	void autreMéthode();
}
----

Et ensuite cette interface est _implémentée_ par la classe `UneClasse`.

[source,language="java"]
----
public class UneClasse implements IMonInterface {
	// attributs, méthodes, ...
	
	@Override
	public void afficher() {
		// .. <1>
	}
}
----
<1> Implémentation de la méthode `afficher()`.

*Exercice* : recoder l'exercice du jeu de cartes, en créant une interface `ICarte`, une classe de base `AbstractBaseCarte` qui contient le champ `protected` `cout`. Seules `Sortilege` et `Creature` héritent de `AbstractBaseCarte`. Les trois classes de cartes implémentent `ICarte`. Ceci nous montre comment bien séparer implémentation et contrat d'utilisation.

==== Exemple

Soit le code suivant :

[source,language="java"]
----
interface IContrat {
  void commencer();
  void terminer();
}

interface ICommencable {
  void commencer();
}

interface IMangeable {
  void manger();
}

interface IConsommable extends IMangeable {
  void digerer();
}

class Base {
  void manger() {
    System.out.println( "Manger" );
  }
}

abstract class ImplPartielle extends Base implements IContrat {
  @Override
  public abstract void commencer();
  
  @Override
  public void terminer() {
    System.exit( 0 );
  }
}

class Implementation extends ImplPartielle implements IConsommable, IMangeable {
  @Override
  public void commencer() {
    System.out.println( "Implementation::commencer()" );
  }
  
  @Override
  public void terminer() {
    System.out.println( "Terminer" );
	
	super.terminer();
  }
}
----

Voici le diagramme de classe correspondant :

image::exemple-interface-uml.jpg[]

=== Les génériques

Qu'est-ce qui peut être _générique_ en java ?

- les classes,
- les interfaces,
- les méthodes.

Type générique:: La classe/interface/méthode dont l'implémentation est écrite sans connaitre à l'avance l'intégralité des types sur lesquels elle s'appuie.

Paramètre de type:: Le nom que l'on donne au type(s) inconnu(s) au sein de l'implémentation d'un type générique.

Type argument:: Le type (réel) qui remplace le paramètre de type au moment de l'utilisation d'une classe/interface/méthode générique.

Contrainte:: Condition(s) que l'on impose au type argument d'un type générique.

==== Classes génériques

Voici un exemple de définition d'une classe générique `Tableau` travaillant sur un paramètre de type `T` :

[source,language="java"]
----
class Tableau<T> { <1>
	private T tableau; <2>
	
	Tableau( int taille ) {
		tableau = (T[]) new Object[taille]; <3>
	}
	
	T get( int index ) { <4>
		return tableau[index];
	}
	
	void set( int index, T valeur ) {
		tableau[index] = valeur;
	}
}
----
<1> Définition du paramètre de type `T`.
<2> L'attribut `tableau` est un tableau de `T`.
<3> Ce transtypage est obligatoire. On verra plus tard comment faire mieux.
<4> On retourne un élément de type `T`.

Voici un exemple de code utilisant la classe générique `Tableau` définie juste au dessus :

[source,language="java"]
----
Tableau<String> tableau;

// Syntaxe jusqu'à Java 6
tableau = new Tableau<String>();

// Syntaxe à partir de Java 7
tableau = new Tableau<>();

tableau.set( 4, "Une chaine de caractère" );
----

==== Méthodes génériques

==== Spécifier des contraintes sur le type générique (ex: `<T extends ICarte>`...)

==== Problème de la covariance

*Exercice* : implémenter une classe `TableauDynamique<T>` permettant de stocker un nombre variable d'éléments de type `T`. La classe aura au moins les méthodes `T get(int index)`, `void set(int index, T value)` et `int size()`.

*Exercice* : utiliser la classe `TableauDynamique<ICarte>` dans le projet de cartes...

*Exercice* : refaire l'alogrithme du tri avec les génériques (interface `Triable` plus `<T extends Triable> T[] trier( T[] data )`). Attention, le tri ne fonctionnera plus sur les types primitifs (auto-boxing).

*Exercice* : si on implémente l'algorithme de tri en prenant des données triables (`<T extends Triable>`), par fois la hierarchie des classes ne permet pas de modifier celle-ci. On définit donc une interface `Comparateur<T>` dont on demande une instance dans la nouvelle méthode `trier` : `<T> T[] trier( T[] data, Comparateur<T> comparateur)`. Vérifier que la méthode `trier(...)` a bien été implémentée deux fois. Bien comprendre que la contrainte de type permet de garantir la correspondance entre les types d'entrée et de sortie.

=== Classes imbriquées

Le langage Java permet de créer des classes à l’intérieur d’une autre classe. On parle de classes imbriquées (_nested class_)

[source,language="java"]
----
class A {
   private class B{
   }
}
----

Les classes imbriquées sont divisées en deux catégories : _statique_ ou _non statique_. On parle de classes statiques imbriquées (_static nested class_) et de classes internes (_inner class_) pour les classes imbriquées non statiques.

Contrairement aux classes classiques qui ne peuvent être définies qu’avec une visibilité `public` ou `package`, les classes imbriquées peuvent être aussi bien `private`, `public`, `protected` ou `package`.

==== Classes internes

Une classe interne peut avoir accès aux méthodes et aux attributs de la classe englobante même si ces derniers sont déclarés en *private*.

[source,language="java"]
----
public class A {
    int a = 1;
    B b = new B();
    C c = new C();
    
    class B {
        void test() {
            a = a + 1;
        }
    }
	
    class C {
        void test() {
            a = a + 1;
            b.test();
        }
    }
}
----

Une classe interne ne peut pas exister si sa classe englobante n’existe pas. Dans l'exemple suivant il est donc nécessaire d'avoir une instance de A pour créer une instance de B :

[source,language="java"]
----
void uneMethode() {
	A a = new A(); <1>
	
	B b = a.new B(); <2>
}
----
<1> Création d'une instance de A.
<2> Création d'une instance de B reliée à a.

==== Classes imbriquées statiques

Une classe imbriquée statique se comporte avec la classe englobante comme n’importe quelle autre classe de haut niveau. Elle *ne peut pas* accéder aux attributs non statiques de la class englobante. Autrement dit, elle ne peut accéder *qu'aux membres statiques* de la classe englobante.

Exemple :

[source,language="java"]
----
public class A {
    private static int a = 1;
    
    public static class B {
        public void test() {
            a = a + 1;
        }
    }
}
----

On peut instancier la classe englobée sans avoir de référence à une instance de la classe englobante.

[source,language="java"]
----
void uneMethode() {
	A.B b = new A.B();
	b.test();
	System.out.println(A.a);
}
----

==== Cas d'utilisation

Les classes imbriquées sont utiles dans plusieurs cas :

- Si une classe n’est utile qu’à une autre classe il est logique de l’intégrer directement dedans. Ceci aide à la lisibilité et la maintenabilité du code.
- Si une classe a besoin d’accéder aux éléments d’une autre classe que l’on souhaite garder avec une visibilité privée, définir cette classe comme classe interne permet de répondre à cette problématique. Ceci améliore l’encapsulation.

=== Classes anonymes

Une classe anonyme est une classe déclarée et instanciée en même temps sans définir de nom (il sera donné par le compilateur). Cette classe ne peut être utilisée qu’à l’endroit où elle a été définie.

Une classe anonyme a accès à tous les éléments accessibles à l'endroit de sa définition.

[source,language="java"]
----
void uneMethode() {
	Plateau plateau = new Plateau( 5, 2 );
	
	Piece piece = new Piece() { <1>
		@Override
		public char getDisplayChar() {
			return 'X';
		}
	}
	
	plateau.placer( piece, new Coordonnee( 2, 2 ) );
}
----
<1> On voit ici la création implicite d'une classe implémentant l'interface `Piece`. Cette classe n'a pas de nom : elle est anonyme.

=== Les exceptions

Mécanisme de gestion des erreurs en Java.

Une *exception* est une instance de la classe (ou sous-classe) `Exception`. Elle représente une *erreur* survenue pendant le déroulement du programme.

Trois mot-clés permettent de détecter et traiter ces erreurs : `try`, `catch` et `finally`.

Lorsqu'une erreur est provoquée, une exception est levée grâce au mot-clé `throw`.

Il est possible d'indiquer qu'une méthode peut potentiellement lever un type d'exception avec le mot-clé `throws`.

==== La hiérarchie des classes d'Exception

La classe mère de toutes les exceptions est la classe `Throwable`.

image::exceptions.png[]

`java.lang.Error`:: C'est sous cette classe que sont regroupées toutes les exceptions associées à des erreurs irrécupérables (par exemple: `OutOfMemoryError`, `StackOverflowError`, ...). Cette classe est réservée à Java, elle est d'ailleurs déclarée `final`, ce qui empêche d'en hériter.

`java.lang.Exception`:: Cette classe est la classe mère de toutes les exceptions _gérées_ (par exemple `FileNotFoundException`). C'est à dire que ces exceptions doivent être déclarées au niveau des signatures des méthodes pouvant les lever (avec le mot-clé `throws`, voir plus loin dans le cours).

`java.lang.RuntimeException`:: Cette classe est la classe mère des exceptions _non gérées_ (par exemple `NullPointerException`), c'est à dire qui peuvent être levées sans être déclarées au préalable dans la signature de la méthode (voir plus loin dans le cours).

==== La classe `Throwable`

La classe `Throwable` possède les caractéristiques suivantes :

- un constructeur par défaut `Throwable()`,
- un constructeur `Throwable( String message )` qui mémorise un message d'erreur,
- une méthode `String getMessage()` qui permet de retrouver le message passé par le constructeur (`null` sinon),
- une méthode `void printStackTrace()` qui écrit dans la sortie standard la pile d'exécution au moment de la levée de l'exception,
- une méthode `void printStackTrace( PrintStream stream )` qui fait la même chose mais dans le flux indiqué en paramètre.

La classe `Throwable` étant la classe mère de *toutes* les exceptions, toutes les exceptions bénéficient de ces fonctionnalités...

==== Détecter et traiter une exception

Si vous exécutez ce code :

[source,language="java"]
----
public class TestException {
	public static void main( String[] args ) {
		int i = 3;
		int j = 0;
		
		System.out.println("résultat = " + (i / j));
	}
}
----

Vous provoquerez la levée de l'exception `ArithmeticException` :

----
Exception in thread "main" java.lang.ArithmeticException: by zero
	at tests.TestException.main(TestException.java:6)
----

Ce message signifie que l'exception `ArithmeticException` a été levée mais qu'elle n'a été _gérée_ par aucun code de votre programme. L'effet de ceci est donc l'arrêt complet du programme.

Il est possible de gérer les exceptions levées, de reprendre la main sur l'exécution du programme et ainsi de poursuivre les opérations, même après la levée d'une exception. Ceci se fait avec les mot-clés `try`, `catch` et `finally` :

[source,language="java"]
----
try {
	// operation risquées;
} catch (ExceptionInteressante e) {
	// traitement de l'exception ExceptionInteressante
} catch (Exception e) {
	// traitement du cas d'exception général
} finally {
	// traitement exécuté dans tous les cas (exception levée ou pas)
}
----

Les instructions situées dans le bloc `try` sont _surveillées_ :

- Si aucune exception n'est levée pendant l'exécution du bloc `try`, l'exécution se poursuit avec le contenu du bloc `finally`.
- Si une exception est levée pendant l'exécution du bloc `try`, l'exécution de celui-ci s'arrête immédiatement et l'exécution se poursuit avec l'exécution du bloc `catch` correspondant le mieux au type de l'exception levée.

Dans tous les cas (exception levée ou pas), le bloc `finally` est exécuté après les autres (même si on fait `return` dans le bloc `try`).

==== Déclarer la potentielle levée d'une exception

Lorsqu'une méthode peut lever une exception *gérée*, celle-ci doit être déclarée au niveau de la signature de la méthode. L'objectif est multiple : avoir une valeur documentaire, préciser au compilateur que cette méthode pourra lever cette exception et obliger à ce que toute méthode qui l'appelle devra prendre en compte cette exception (traitement ou propagation).

Par exemple, cette méthode doit déclarer `throws IOException` :

[source,language="java"]
----
public static String saisir( String message ) throws IOException <2>
{
	System.out.println( message );
	System.out.print( "> " );

	BufferedReader reader = new BufferedReader( new InputStreamReader( System.in ) );
	return reader.readLine(); <1>
}
----
<1> La méthode `readLine()` peut provoquer l'exception `IOException` qui est une sous-classe de `Exception` (et non de `RuntimeException`).
<2> Ceci oblige à préciser dans le prototype de `saisir(...)` que cette méthode peut lever `IOException`.

Si l'exception potentiellement est gérée par la méthode, alors il n'est plus nécessaire de la déclarer avec `throws` :

[source,language="java"]
----
public static String saisie( String message )
{
	System.out.println( message );
	System.out.print( "> " );

	BufferedReader reader = new BufferedReader( new InputStreamReader( System.in ) );
	try <1>
	{
		return reader.readLine();
	}
	catch( IOException e ) <2>
	{
		e.printStackTrace(); <3>
		return null; <4>
	}
}
----
<1> On surveille l'exécution de la méthode `readLine()`...
<2> On définit le comportement à adopter si l'exception `IOException` est levée.
<3> On affiche la pile d'appel ayant provoqué l'exception.
<4> Mais on décide de retourner `null`...

==== Les exceptions personnalisées

Il est évidemment possible de définir des classes d'exception spécifiques à votre application. Celles-ci doivent être des sous-classes de `RuntimeException` (pour les exceptions non gérées) ou de `Exception`.

Exemple : 

[source,language="java"]
----
public class SaisieErroneeException extends Exception { <1>
	public SaisieErroneeException() {
	}

	public SaisieErroneeException( String s ) {
		super( s );
	}
}

public class TestSaisieErroneeException {
	public static void controle( String chaine ) throws SaisieErroneeException {
		if( "".equals( chaine ) == true )
			throw new SaisieErroneeException("Saisie erronee : chaine vide"); <2>
	}

	public static void main( String[] args ) {
		String chaine1 = "";

		try {
			controle( chaine1 );
		} catch ( SaisieErroneeException e ) { <3>
			System.out.println( "Saisie erronee: " + e.getMessage() );
		}
	}
}
----
<1> Nous sommes en train de définir une exception _gérée_.
<2> Le mot clé `throws` sert à lever une exception.
<3> Le `catch` ici permet le traitement spécifique de l'exception `SaisieErroneeException`. Toute autre classe d'exception ne sera pas _attrapée_.

==== Exercices

Vous pouvez effectuer cet http://perso.telecom-paristech.fr/~charon/coursJava/exercices/fact+Exc.html[exercice] pour vous familiariser avec la syntaxe des exceptions.

=== Quelques classes du SDK

==== `Iterable<T>` et la boucle for

==== `Comparable<T>`

==== `ArrayList<>`, `List<>`

==== `StringBuilder`, ...

*Exercice* : implémenter `Iterable<T>` dans TableauDynamique et utiliser la forme _foreach_ de la boucle `for` dans le projet des cartes.

=== Communication entre objets (patterns de communication)

== A suivre...

- Design patterns
- Java EE - Architectures distribuées
- Java EE - Servlets, JSP, EJB
- Spring IOC et TDD
- XML, DTD, XSL, XSLT
- SOA - Approche orientée services
- RIA - Rich internet applications

- Java : file system, threads, ...
- Tests unitaires
- Maven
- GWT
- Spring Boot -> les indispensables : JPA, IOC, conf discovery, ...
- Docker
- HTML5 CSS3 Javascript, Typescript

TOTAL = 8 semaines.



